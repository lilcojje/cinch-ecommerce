AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Cinch E-Commerce Microservices Stack
  Provisions EC2 (Docker) + RDS MySQL + networking resources.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to SSH into the instance
    Type: AWS::EC2::KeyPair::KeyName

  DBUsername:
    Description: The MySQL database admin username
    Type: String
    Default: cinch_user
    MinLength: 1
    MaxLength: 16

  DBPassword:
    Description: The MySQL database admin password
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41

  DBName:
    Description: The name of the database to create
    Type: String
    Default: cinch_db

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro

Mappings:
  RegionMap:
    ap-southeast-2:
      AMI: ami-051f8a213df8bc089  # Ubuntu 22.04 LTS in ap-southeast-2
    us-east-1:
      AMI: ami-0c7217cdde317cfec  # Ubuntu 22.04 LTS in us-east-1

Resources:
  # üß± VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CinchVPC

  # üåê Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # üß≠ Route Table + Route
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # üï∏Ô∏è Public Subnets (2 AZs)
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true

  SubnetRouteTableAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable

  # üîê Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, HTTPS, SSH, and DB access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  # üóÑÔ∏è RDS MySQL
  MySQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: MySQL
      EngineVersion: "8.0"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      VPCSecurityGroups: [!Ref InstanceSecurityGroup]
      PubliclyAccessible: true
      MultiAZ: false
      DBSubnetGroupName: !Ref DBSubnetGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Cinch DB
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB

  # üíª EC2 Instance for Docker Microservices
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetA
          GroupSet:
            - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y docker.io docker-compose git
          systemctl enable docker
          systemctl start docker
          cd /home/ubuntu
          git clone https://github.com/lilcojje/cinch-ecommerce.git
          cd cinch-ecommerce
          docker-compose up -d --build
      Tags:
        - Key: Name
          Value: CinchEC2
          
          
    FrontendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0abcdef1234567890 # Ubuntu AMI for your region
      KeyName: !Ref FrontendKeyPair
      SecurityGroupIds: [!Ref WebSecurityGroup]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install -y nginx nodejs npm git
          git clone https://github.com/lilcojje/cinch-ecommerce-frontend.git /var/www/vueapp
          cd /var/www/vueapp
          npm install
          npm run build
          cp -r dist/* /var/www/html/
          systemctl restart nginx      

Outputs:
  InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  RDSEndpoint:
    Description: RDS MySQL Endpoint
    Value: !GetAtt MySQLDB.Endpoint.Address
